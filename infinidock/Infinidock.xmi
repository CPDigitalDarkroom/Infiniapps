
/* Configuration and Preferences {{{ */

#define IFConfigurationTweakIdentifier Infinidock
#define IFConfigurationListClass SBDockIconListView
#define IFConfigurationExpandHorizontally YES
#define IFConfigurationExpandVertically NO
#define IFConfigurationDynamicColumns YES
#define IFConfigurationExpandWhenEditing NO

#define IFPreferencesPagingEnabled @"IFPagingEnabled", NO
#define IFPreferencesScrollEnabled @"IFScrollEnabled", YES
#define IFPreferencesScrollBounce @"IFScrollBounce", kIFScrollBounceEnabled
#define IFPreferencesScrollbarStyle @"IFScrollbarStyle", kIFScrollbarStyleNone

#import "infinishared/Infinilist.h"
#import "infinishared/Preferences.h"

static NSInteger IFFlagDefaultIconsPerPage = 0;

static NSUInteger IFVeryDefaultIconColumns() {
    // Both default for Infinilist and for Infinidock.
    UIInterfaceOrientation orientation = [IFIconControllerSharedInstance() orientation];

    NSUInteger icons = 0;
    IFFlag(IFFlagDefaultDimensions) {
        IFFlag(IFFlagDefaultIconsPerPage) {
            icons = [IFConfigurationListClassObject iconColumnsForInterfaceOrientation:orientation];
        }
    }

    return icons;
}

#define IFPreferencesIconsPerPage @"IFIconsPerPage", (IFVeryDefaultIconColumns())
#define IFPreferencesRestorePage @"IFRestoreEnabled", 0
#define IFPreferencesSnapEnabled @"IFSnapEnabled", NO // TODO: implement me!

/* }}} */

%group IFInfinidock

/* Layout {{{ */

%hook IFConfigurationListClass

typedef enum {
    kIFIconLayoutMethodDefault, // Handles up to default number of icons, positions as if built-in.
    kIFIconLayoutMethodGrow, // Handles any number of icons, positions as if built-in but grows from the left.
    kIFIconLayoutMethodEven // Handles any number of icons, positions with equal spacing.
} IFIconLayoutMethod;

static IFIconLayoutMethod IFIconListCurrentLayoutMethod(SBIconListView *listView) {
    if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled)) {
        // We never simulate more than the default count of icons
        // when paging, so this layout method always works.
        return kIFIconLayoutMethodDefault;
    } else {
        NSInteger icons = [[listView icons] count];
        NSInteger defaultIcons = [IFIconListSizingInformationForIconList(listView) defaultDimensions].columns;

        if (icons < defaultIcons) {
            // When we have less than the selected number of icons,
            // we need to center them as with the built-in spacing.
            return kIFIconLayoutMethodDefault;
        } else if (defaultIcons < IFVeryDefaultIconColumns()) {
            // If we are showing a small number of icons per page,
            // they will not center themselves right. Fix that.
            return kIFIconLayoutMethodEven;
        } else {
            if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
                // Most cases for non-paged icons.
                // FIXME: Make this method work on iPad.
                return kIFIconLayoutMethodGrow;
            } else {
                // Growing creates outsided margins with high icon counts
                // on the iPad, so instead use the even layout method.
                return kIFIconLayoutMethodEven;
            }
        }
    }
}

+ (NSUInteger)iconColumnsForInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    if (self == IFConfigurationListClassObject && !IFFlagDefaultIconsPerPage) {
        NSUInteger icons = IFPreferencesIntForKey(IFPreferencesIconsPerPage);
        return icons;
    } else {
        return %orig;
    }
}

static NSInteger IFFlagDisableVisibleIcons = 0;

- (NSUInteger)visibleIconsInDock {
    if (IFIconListIsValid(self) && !IFFlagDisableVisibleIcons) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            NSInteger icons = %orig;
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            return IFMinimum(icons, defaultIcons);
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (NSUInteger)iconsInRowForSpacingCalculation {
    if (IFIconListIsValid(self)) {
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
            if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
                NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

                return IFMaximum(defaultIcons, IFVeryDefaultIconColumns());
            } else {
                return %orig;
            }
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)horizontalIconPadding {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            // This is unfortunate, but currently required. Otherwise, the original
            // implementation will use the expanded frame, and will return an
            // incorrect value and icons will appear positioned very strangely.
            IFFlagExpandedFrame -= 1;
            CGFloat additional = %orig;
            IFFlagExpandedFrame += 1;
            return additional;
        } else if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodEven) {
            // This is valid because with even spacing, all icons are the same
            // distance apart, and so the side edge distance is also the spacing.

            // This is required because the default spacing algorithm will not
            // work for one icon per page, as there will be no need for a distance
            // beteween icons. But, there is an equivalent side inset, so use that.
            return [self sideIconInset];
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)sideIconInset {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodEven) {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            CGFloat iconWidth = IFIconDefaultSize().width;
            CGFloat width = [IFListsScrollViewForListView(self) bounds].size.width;

            CGFloat blankWidth = width - (iconWidth * defaultIcons);
            CGFloat singleBlank = blankWidth / (defaultIcons + 1);
            return roundf(singleBlank);
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)_additionalSideInsetToCenterIcons {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            return %orig;
        } else {
            // Other methods don't want a side inset.
            return 0.0;
        }
    } else {
        return %orig;
    }
}

- (void)_updateForOrientation:(UIInterfaceOrientation)orientation duration:(NSTimeInterval)interval {
    %orig;

    [self layoutIconsNow];
}

%end

/* }}} */

/* Snap {{{ */

%hook IFConfigurationListClass

%new(v@:@{CGPoint=ff}^{CGPoint=ff})
- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint *)targetContentOffset {
    if (IFPreferencesBoolForKey(IFPreferencesSnapEnabled)) {
        SBIconListView *listView = IFListsListViewForScrollView(scrollView);

        CGPoint contentOffset = [scrollView contentOffset];
        CGSize contentSize = [scrollView contentSize];
        CGSize boundsSize = [scrollView bounds].size;

        CGSize iconSize = IFIconDefaultSize();
        CGFloat iconInset = [listView sideIconInset];
        CGFloat iconPadding = [listView horizontalIconPadding];

        CGPoint screenOffset = *targetContentOffset;
        screenOffset.x -= contentOffset.x;
        screenOffset.y -= contentOffset.y;
        NSUInteger column = [listView columnAtPoint:screenOffset];

        CGPoint origin = [listView originForIconAtIndex:column];
        CGPoint offset = CGPointZero;

        // Find the icon offset to move to.
        if (targetContentOffset->x - origin.x < iconSize.width / 2) {
            offset.x = origin.x;
        } else {
            offset.x = origin.x + iconSize.width + iconPadding;
        }

        offset.x -= iconInset;

        if (offset.x <= 0) {
            offset.x = 0;
        } else if (offset.x + boundsSize.width >= contentSize.width) {
            offset.x = contentSize.width - boundsSize.width;
        }

        // Avoid changing the content offset if possible, as it prevents bouncing.
        if (fabs(offset.x - targetContentOffset->x) > 1.0) {
            // Work around UIScrollView bug where you cannot return values at the edges.
            if (offset.x <= 0) {
                offset.x = 0.1;
            } else if (offset.x + boundsSize.width >= contentSize.width) {
                offset.x = contentSize.width - boundsSize.width - 0.1;
            }

            *targetContentOffset = offset;
        }
    }
}

%end

/* }}} */

/* Fixes {{{ */

%hook SBIconController

// This method checks -visibleIconsInDock and won't add any past the end. As we hook that for spacing reasons,
// this hook is necessary to disable that hook and allow moving icons past the first page when using the paging method.
- (id)insertIcon:(SBIcon *)icon intoListView:(SBIconListView *)view iconIndex:(NSUInteger)index moveNow:(BOOL)now pop:(BOOL)pop {
    id i = nil;

    if (IFIconListIsValid(view)) {
        IFFlag(IFFlagDisableVisibleIcons) {
            i = %orig;
        }
    } else {
        i = %orig;
    }

    return i;
}

%end

/* }}} */

/* Restore {{{ */

%hook SBUIController

static void IFRestoreIconLists() {
    IFPreferencesApply();

    IFListsIterateViews(^(SBIconListView *listView, UIScrollView *scrollView) {
        NSUInteger page = IFPreferencesIntForKey(IFPreferencesRestorePage);

        if (page != 0) {
            // The actual page to restore to.
            page = (page - 1);

            CGSize size = [scrollView bounds].size;
            CGPoint offset = [scrollView contentOffset];
            CGSize content = [scrollView contentSize];

            if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled)) {
                offset.x = (size.width * page);
            } else {
                NSUInteger iconsPerPage = IFPreferencesIntForKey(IFPreferencesIconsPerPage);
                NSUInteger index = (page * iconsPerPage);

                CGPoint origin = [listView originForIconAtIndex:index];
                CGFloat side = [listView sideIconInset];

                offset = CGPointMake(origin.x - side, 0);
            }

            // Constrain to the scroll view's size.
            if (offset.x + size.width > content.width) {
                offset.x = content.width - size.width;
            }

            [scrollView setContentOffset:offset animated:NO];
        }
    });
}

- (void)restoreIconList:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)animateWallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimatedIfNeeded:(BOOL)needed animateWallpaper:(BOOL)wallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListForSuspendGesture {
    %orig;
    IFRestoreIconLists();
}

%end

/* }}} */

%end

/* Constructor {{{ */

__attribute__((constructor)) static void infinidock_init() {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    dlopen("/Library/MobileSubstrate/DynamicLibraries/_iPhoneRotator.dylib", RTLD_LAZY);

    IFPreferencesInitialize(@"com.chpwn.infinidock", IFPreferencesApply);

    dlopen("/Library/MobileSubstrate/DynamicLibraries/IconSupport.dylib", RTLD_LAZY);
    [[objc_getClass("ISIconSupport") sharedInstance] addExtension:@"infinidock"];

    %init(IFInfinidock);
    %init(IFBasic);

    [pool release];
}

/* }}} */

