
#define IFConfigurationListClass SBDockIconListView
#define IFConfigurationExpandHorizontally YES
#define IFConfigurationExpandVertically NO
#define IFConfigurationDynamicColumns YES
#define IFConfigurationExpandWhenEditing NO

#define IFPreferencesPagingEnabled @"IFPagingEnabled", NO
#define IFPreferencesScrollEnabled @"IFScrollEnabled", YES
#define IFPreferencesScrollBounce @"IFScrollBounce", kIFScrollBounceEnabled
#define IFPreferencesScrollbarStyle @"IFScrollbarStyle", kIFScrollbarStyleNone

#import "infinishared/Infinilist.h"
#import "infinishared/Preferences.h"

static NSInteger IFFlagDefaultIconsPerPage = 0;

static NSUInteger IFVeryDefaultIconColumns() {
    // Both default for Infinilist and for Infinidock.
    UIInterfaceOrientation orientation = [IFIconControllerSharedInstance() orientation];

    NSUInteger icons = 0;
    IFFlag(IFFlagDefaultDimensions) {
        IFFlag(IFFlagDefaultIconsPerPage) {
            icons = [IFConfigurationListClassObject iconColumnsForInterfaceOrientation:orientation];
        }
    }

    return icons;
}

#define IFPreferencesIconsPerPage @"IFIconsPerPage", (IFVeryDefaultIconColumns())
#define IFPreferencesRestorePage @"IFRestoreEnabled", 0
#define IFPreferencesSnapEnabled @"IFSnapEnabled", NO // TODO: implement me!

%group IFInfinidock

%hook IFConfigurationListClass

typedef enum {
    kIFIconLayoutMethodDefault, // Handles up to default number of icons, positions as if built-in.
    kIFIconLayoutMethodGrow, // Handles any number of icons, positions as if built-in but grows from the left.
    kIFIconLayoutMethodEven // Handles any number of icons, positions with equal spacing.
} IFIconLayoutMethod;

static IFIconLayoutMethod IFIconListCurrentLayoutMethod(SBIconListView *listView) {
    if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled)) {
        // We never simulate more than the default count of icons
        // when paging, so this layout method always works.
        return kIFIconLayoutMethodDefault;
    } else {
        NSInteger icons = [[listView icons] count];
        NSInteger defaultIcons = [IFIconListSizingInformationForIconList(listView) defaultDimensions].columns;

        if (icons < defaultIcons) {
            // When we have less than the selected number of icons,
            // we need to center them as with the built-in spacing.
            return kIFIconLayoutMethodDefault;
        } else if (defaultIcons < IFVeryDefaultIconColumns()) {
            // If we are showing a small number of icons per page,
            // they will not center themselves right. Fix that.
            return kIFIconLayoutMethodEven;
        } else {
            // Most cases for non-paged icons.
            return kIFIconLayoutMethodGrow;
        }
    }
}

+ (NSUInteger)iconColumnsForInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    if (self == IFConfigurationListClassObject && !IFFlagDefaultIconsPerPage) {
        NSUInteger icons = IFPreferencesIntForKey(IFPreferencesIconsPerPage);
        return icons;
    } else {
        return %orig;
    }
}

static NSInteger IFFlagDisableVisibleIcons = 0;

- (NSInteger)visibleIconsInDock {
    if (IFIconListIsValid(self) && !IFFlagDisableVisibleIcons) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            NSInteger icons = %orig;
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            return IFMinimum(icons, defaultIcons);
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (NSUInteger)iconsInRowForSpacingCalculation {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            return IFMaximum(defaultIcons, IFVeryDefaultIconColumns());
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)horizontalIconPadding {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            // This is unfortunate, but currently required. Otherwise, the original
            // implementation will use the expanded frame, and will return an
            // incorrect value and icons will appear positioned very strangely.
            IFFlagExpandedFrame -= 1;
            CGFloat additional = %orig;
            IFFlagExpandedFrame += 1;
            return additional;
        } else if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodEven) {
            // This is valid because with even spacing, all icons are the same
            // distance apart, and so the side edge distance is also the spacing.

            // This is required because the default spacing algorithm will not
            // work for one icon per page, as there will be no need for a distance
            // beteween icons. But, there is an equivalent side inset, so use that.
            return [self sideIconInset];
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)sideIconInset {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodEven) {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            CGFloat iconWidth = IFIconDefaultSize().width;
            CGFloat width = [IFListsScrollViewForListView(self) bounds].size.width;

            CGFloat blankWidth = width - (iconWidth * defaultIcons);
            CGFloat singleBlank = blankWidth / (defaultIcons + 1);
            return singleBlank;
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)_additionalSideInsetToCenterIcons {
    if (IFIconListIsValid(self)) {
        if (IFIconListCurrentLayoutMethod(self) == kIFIconLayoutMethodDefault) {
            return %orig;
        } else {
            // Other methods don't want a side inset.
            return 0.0;
        }
    } else {
        return %orig;
    }
}

%end

%hook SBIconController

// This method checks -visibleIconsInDock and won't add any past the end. As we hook that for spacing reasons,
// this hook is necessary to disable that hook and allow moving icons past the first page when using the paging method.
- (id)insertIcon:(SBIcon *)icon intoListView:(SBIconListView *)view iconIndex:(NSUInteger)index moveNow:(BOOL)now pop:(BOOL)pop {
    id i = nil;

    if (IFIconListIsValid(view)) {
        IFFlag(IFFlagDisableVisibleIcons) {
            i = %orig;
        }
    } else {
        i = %orig;
    }

    return i;
}

%end

%hook SBUIController

static void IFRestoreIconLists() {
    IFPreferencesApply();

    IFListsIterateViews(^(SBIconListView *listView, UIScrollView *scrollView) {
        NSUInteger page = IFPreferencesIntForKey(IFPreferencesRestorePage);

        if (page != 0) {
            // The actual page to restore to.
            page = (page - 1);

            CGSize size = [scrollView bounds].size;

            if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled)) {
                CGPoint offset = [scrollView contentOffset];
                offset.x = (size.width * page);
                [scrollView setContentOffset:offset animated:NO];
            } else {
                // FIXME: restore to page without paging enabled
            }
        }
    });
}

- (void)restoreIconList:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)animateWallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimatedIfNeeded:(BOOL)needed animateWallpaper:(BOOL)wallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListForSuspendGesture {
    %orig;
    IFRestoreIconLists();
}

%end

%end

/* Constructor {{{ */

__attribute__((constructor)) static void infinidock_init() {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    dlopen("/Library/MobileSubstrate/DynamicLibraries/_iPhoneRotator.dylib", RTLD_LAZY);

    IFPreferencesInitialize(@"com.chpwn.infinidock", IFPreferencesApply);

    dlopen("/Library/MobileSubstrate/DynamicLibraries/IconSupport.dylib", RTLD_LAZY);
    [[objc_getClass("ISIconSupport") sharedInstance] addExtension:@"infinidock"];

    %init(IFInfinidock);
    %init(IFBasic);

    [pool release];
}

/* }}} */

