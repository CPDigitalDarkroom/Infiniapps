
#define IFConfigurationListClass SBDockIconListView
#define IFConfigurationExpandHorizontally YES
#define IFConfigurationExpandVertically NO
#define IFConfigurationDynamicColumns YES
#define IFConfigurationExpandWhenEditing NO

#define IFPreferencesPagingEnabled @"IFPagingEnabled", NO
#define IFPreferencesScrollEnabled @"IFScrollEnabled", NO

#import "infinishared/Infinilist.h"
#import "infinishared/Preferences.h"

#define IFPreferencesIconsPerPage @"IFIconsPerPage", 4
#define IFPreferencesRestorePage @"IFRestoreEnabled", 0
#define IFPreferencesSnapEnabled @"IFSnapEnabled", NO

%group IFInfinidock

%hook IFConfigurationListClass

static BOOL IFIconListAtLeastDefaultIcons(SBIconListView *listView) {
    NSInteger icons = [[listView icons] count];
    NSInteger defaultIcons = [IFIconListSizingInformationForIconList(listView) defaultDimensions].columns;

    return (icons >= defaultIcons);
}

+ (NSUInteger)iconColumnsForInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    if (self == IFConfigurationListClassObject) {
        NSUInteger icons = IFPreferencesIntForKey(IFPreferencesIconsPerPage);
        return icons;
    } else {
        return %orig;
    }
}

- (NSInteger)visibleIconsInDock {
    if (IFIconListIsValid(self)) {
        if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled) || !IFIconListAtLeastDefaultIcons(self)) {
            NSInteger icons = %orig;
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            return IFMinimum(icons, defaultIcons);
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (NSUInteger)iconsInRowForSpacingCalculation {
    if (IFIconListIsValid(self)) {
        if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled) || !IFIconListAtLeastDefaultIcons(self)) {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            return IFMaximum(defaultIcons, 4);
        } else {
            return %orig;
        }
    } else {
        return %orig;
    }
}

- (CGFloat)horizontalIconPadding {
    if (IFIconListIsValid(self)) {
        if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled) || !IFIconListAtLeastDefaultIcons(self)) {
            IFFlagExpandedFrame -= 1;
            CGFloat additional = %orig;
            IFFlagExpandedFrame += 1;
            return additional;
        } else {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            // The hard case: even spacing.
            if (defaultIcons < 4) {
                // This is valid because with even spacing, all icons are the same
                // distance apart, and so the side edge distance is also the spacing.

                // This is required because the default spacing algorithm will not
                // work for one icon per page, as there will be no need for a distance
                // beteween icons. But, there is an equivalent side inset, so use that.
                return [self sideIconInset];
            } else {
                return %orig;
            }
        }
    } else {
        return %orig;
    }
}

- (CGFloat)sideIconInset {
    if (IFIconListIsValid(self)) {
        if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled) || !IFIconListAtLeastDefaultIcons(self)) {
            return %orig;
        } else {
            NSInteger defaultIcons = [IFIconListSizingInformationForIconList(self) defaultDimensions].columns;

            // The hard case: even spacing.
            if (defaultIcons < 4) {
                CGFloat iconWidth = IFIconDefaultSize().width;
                CGFloat width = [IFListsScrollViewForListView(self) bounds].size.width;

                CGFloat blankWidth = width - (iconWidth * defaultIcons);
                CGFloat singleBlank = blankWidth / (defaultIcons + 1);
                return singleBlank;
            } else {
                return %orig;
            }
        }
    } else {
        return %orig;
    }
}

- (CGFloat)_additionalSideInsetToCenterIcons {
    if (IFIconListIsValid(self)) {
        if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled) || !IFIconListAtLeastDefaultIcons(self)) {
            return %orig;
        } else {
            return 0.0;
        }
    } else {
        return %orig;
    }
}

%end

%hook SBUIController

static void IFRestoreIconLists() {
    IFPreferencesApply();

    IFListsIterateViews(^(SBIconListView *listView, UIScrollView *scrollView) {
        NSUInteger page = IFPreferencesIntForKey(IFPreferencesRestorePage);

        if (page != 0) {
            // The actual page to restore to.
            page = (page - 1);

            CGSize size = [scrollView bounds].size;

            if (IFPreferencesBoolForKey(IFPreferencesPagingEnabled)) {
                CGPoint offset = [scrollView contentOffset];
                offset.x = (size.width * page);
                [scrollView setContentOffset:offset animated:NO];
            } else {
                // FIXME: restore to page without paging enabled
            }
        }
    });
}

- (void)restoreIconList:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)animateWallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimated:(BOOL)animated delay:(NSTimeInterval)delay animateWallpaper:(BOOL)wallpaper keepSwitcher:(BOOL)switcher {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListAnimatedIfNeeded:(BOOL)needed animateWallpaper:(BOOL)wallpaper {
    %orig;
    IFRestoreIconLists();
}

- (void)restoreIconListForSuspendGesture {
    %orig;
    IFRestoreIconLists();
}

%end

%end

/* Constructor {{{ */

__attribute__((constructor)) static void infinidock_init() {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    dlopen("/Library/MobileSubstrate/DynamicLibraries/_iPhoneRotator.dylib", RTLD_LAZY);

    IFPreferencesInitialize(@"com.chpwn.infinidock", IFPreferencesApply);

    dlopen("/Library/MobileSubstrate/DynamicLibraries/IconSupport.dylib", RTLD_LAZY);
    [[objc_getClass("ISIconSupport") sharedInstance] addExtension:@"infinidock"];

    %init(IFInfinidock);
    %init(IFBasic);

    [pool release];
}

/* }}} */

